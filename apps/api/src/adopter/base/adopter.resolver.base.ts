/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateAdopterArgs } from "./CreateAdopterArgs";
import { UpdateAdopterArgs } from "./UpdateAdopterArgs";
import { DeleteAdopterArgs } from "./DeleteAdopterArgs";
import { AdopterCountArgs } from "./AdopterCountArgs";
import { AdopterFindManyArgs } from "./AdopterFindManyArgs";
import { AdopterFindUniqueArgs } from "./AdopterFindUniqueArgs";
import { Adopter } from "./Adopter";
import { RescueFindManyArgs } from "../../rescue/base/RescueFindManyArgs";
import { Rescue } from "../../rescue/base/Rescue";
import { AdopterService } from "../adopter.service";
@graphql.Resolver(() => Adopter)
export class AdopterResolverBase {
  constructor(protected readonly service: AdopterService) {}

  async _adoptersMeta(
    @graphql.Args() args: AdopterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Adopter])
  async adopters(
    @graphql.Args() args: AdopterFindManyArgs
  ): Promise<Adopter[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Adopter, { nullable: true })
  async adopter(
    @graphql.Args() args: AdopterFindUniqueArgs
  ): Promise<Adopter | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Adopter)
  async createAdopter(
    @graphql.Args() args: CreateAdopterArgs
  ): Promise<Adopter> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Adopter)
  async updateAdopter(
    @graphql.Args() args: UpdateAdopterArgs
  ): Promise<Adopter | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Adopter)
  async deleteAdopter(
    @graphql.Args() args: DeleteAdopterArgs
  ): Promise<Adopter | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Rescue], { name: "pets" })
  async resolveFieldPets(
    @graphql.Parent() parent: Adopter,
    @graphql.Args() args: RescueFindManyArgs
  ): Promise<Rescue[]> {
    const results = await this.service.findPets(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
