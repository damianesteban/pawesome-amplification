/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateAdoptionArgs } from "./CreateAdoptionArgs";
import { UpdateAdoptionArgs } from "./UpdateAdoptionArgs";
import { DeleteAdoptionArgs } from "./DeleteAdoptionArgs";
import { AdoptionCountArgs } from "./AdoptionCountArgs";
import { AdoptionFindManyArgs } from "./AdoptionFindManyArgs";
import { AdoptionFindUniqueArgs } from "./AdoptionFindUniqueArgs";
import { Adoption } from "./Adoption";
import { Adopter } from "../../adopter/base/Adopter";
import { Rescue } from "../../rescue/base/Rescue";
import { AdoptionService } from "../adoption.service";
@graphql.Resolver(() => Adoption)
export class AdoptionResolverBase {
  constructor(protected readonly service: AdoptionService) {}

  async _adoptionsMeta(
    @graphql.Args() args: AdoptionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Adoption])
  async adoptions(
    @graphql.Args() args: AdoptionFindManyArgs
  ): Promise<Adoption[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Adoption, { nullable: true })
  async adoption(
    @graphql.Args() args: AdoptionFindUniqueArgs
  ): Promise<Adoption | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Adoption)
  async createAdoption(
    @graphql.Args() args: CreateAdoptionArgs
  ): Promise<Adoption> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        adopter: args.data.adopter
          ? {
              connect: args.data.adopter,
            }
          : undefined,

        rescue: args.data.rescue
          ? {
              connect: args.data.rescue,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Adoption)
  async updateAdoption(
    @graphql.Args() args: UpdateAdoptionArgs
  ): Promise<Adoption | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          adopter: args.data.adopter
            ? {
                connect: args.data.adopter,
              }
            : undefined,

          rescue: args.data.rescue
            ? {
                connect: args.data.rescue,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Adoption)
  async deleteAdoption(
    @graphql.Args() args: DeleteAdoptionArgs
  ): Promise<Adoption | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Adopter, {
    nullable: true,
    name: "adopter",
  })
  async resolveFieldAdopter(
    @graphql.Parent() parent: Adoption
  ): Promise<Adopter | null> {
    const result = await this.service.getAdopter(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Rescue, {
    nullable: true,
    name: "rescue",
  })
  async resolveFieldRescue(
    @graphql.Parent() parent: Adoption
  ): Promise<Rescue | null> {
    const result = await this.service.getRescue(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
